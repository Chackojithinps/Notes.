------->
In React, when you write onClick={addItems()}, you are actually calling the addItems function 
immediately when the component renders instead of assigning it as a callback function to be executed
when the button is clicked.This happens because the parentheses () after addItems invoke the 
function immediately. So, when the component renders, the addItems function will be executed,
and its return value will be assigned as the onClick event handler for the button. 

--->We cant put return to be empty 
    we Cant return more than one element 
    we can return only one element.
    Always wrap multiple elements inside one element.Fragments are used to wrap without getting notices on html

---->Benefits of fragments 
     it do not appear on your deocument.
     <></>

----->is jsx is understand by browser?

      NO.actually it is converted into html code and as well as js code
      Browser can only understand either html,css,js
      JSX means which allows you to write HTML tags inside the JavaScript code:

----->Default is using in export we can directly import.but in normal export we have to destructe it.
    In React, the "default export" is a feature that allows a module to export a single value
    or component as the default export. It is commonly used when there is only one main value
    or component that needs to be imported from a module.When a module uses default export,
    it means that when another module imports from it, it can choose to import the default
    export without specifying its name or use a custom name for it.

---->when ever anything happens in react,react doesnt make changes directly in html Dom
     what exactly react do is it create a virtual dom. (No one can see that,react creates its own Dom.that is 
     virtual Dom).So with the help of virtual dom react identifies which needs to be changed
     and just change only those things.so it is faster.


----->How virtual dom works?
     REact run on virtual Dom and then compares wiht the real dom.when ever find a difference it 
     updates the real dom with the virtual dom .because virtual dom is the updated one. 
     (js directly work on Dom)

------>in react The let and const not going to update the dom .to this we are using the hooks.

------>Rendering means processing part of website(putting js html css together and make us or give the website )

------>when a reactive variable get updated the whole component get re-rendered.(Not the whole document only component we needs)

------>useState(0) here 0 is initial value

------>Each state is relevent or related to that particular component only.

------>useEffect runs for the first time alwayus when component renders
       when ever the dependency in useEffect updates it will run the function inside the useEffect.

------>When ever we want a component inside any other component it is called child parent relationship.

------>when a normal variable or js variable get updates,react doenst care,it doest make changes in frontend.Reacts only looks states to change.
       whenever the states changes it will rerender the component.

------>when we store an item in local storage and when we open the site in new tab that data will be there .it wont lost.
       But in the session storage the data will be stored to that specific tab only.

------>To store item in local storage we can use window.localStorage.setItem('module','7') (here like key value pair we can store.key and value should be string.)
       window.localStorage.getItem('module') to get that data
       local storage is a part of browser.

------>json.stringify converts array into string and objects into string.
       when we want to store the data into local storage we have to stringify that. and if we want to bring data from localStorage to frontend we need to parse it.


------->import { useState } from "react";

export default function CountWithoutEffect() {
    const [count, setCount] = useState(0);
    const [doubleCount, setDoubleCount] = useState(count * 2);
    const handleCount = () => {
        setCount(count + 1);
        setDoubleCount(count * 2); // This will not use the latest value of count
    };
    return (
        <div className="App">
            <div>
                <h2>Count Without useEffect</h2>
                <h3>Count: {count}</h3>
                <h3>Count * 2: {doubleCount}</h3>
                <button onClick={handleCount}>Count++</button>
            </div>
        </div>
    );
}


----->import { useState, useEffect } from "react";

export default function CountWithEffect() {
    const [count, setCount] = useState(0);
    const [doubleCount, setDoubleCount] = useState(count * 2);
    const handleCount = () => {
        setCount(count + 1);
    };

    useEffect(() => {
        setDoubleCount(count * 2); // This will always use latest value of count
    }, [count]);

    return (
        <div>
            <h2>Count with useEffect</h2>
            <h3>Count: {count}</h3>
            <h3>Count * 2: {doubleCount}</h3>
            <button onClick={handleCount}>Count++</button>
        </div>
    );
}


------>Routes 
       Used to define all the routes 
       npm i -D react-router-dom

------>Router
       Router is used to define where in your app you want to access to react dom stuffs.
       <Link> is used to set the URL 

------>Props drilling 
        Data not required by parents also have the data 
        processing part is expensive

------>useContext--
       it is use to sent the data from parent to child directly .anyOne can access it directly
       SomeContext.Provider lets you provide the context value to components.
       SomeContext.Consumer is an alternative and rarely used way to read the context value.
       createContext lets you create a context that components can provide or read.

------->createContext(defaultValue)
        const ThemeContext = createContext('light');
        If you don’t have any meaningful default value, specify null. The default value is meant as a “last resort” fallback. It is static and never changes over time.
        createContext returns a context object.The context object itself does not hold any information. It represents which context other components read or provide.
        Typically, you will use SomeContext.Provider in components to specify the context value, and call useContext(SomeContext) in components below to read it. 

        value: The value that you want to pass to all the components reading this context inside this provider, no matter how deep.

------->Dom means it a object oriented representations of web page.
        when the webpage loaded browser creates the html dom of the page.
        it represents all Html elements as objects.that means each html element will be considered as an object in dom
        each have parent child relationsship.
        so through dom we can  access the the html elements.

-------->Why then virutal Dom is used?
        when we make a change in dom , the updated element and it’s children have to be re-rendered to update the application UI.
        The re-rendering or re-painting of the UI is what makes it slow. Therefore, the more UI components you have,
        the more expensive the DOM updates could be, since they would need to be re-rendered for every DOM update.
        The virtual DOM is only a virtual representation of the DOM. Everytime the state of our application changes, the virtual DOM gets updated instead of the real DOM.

-------->How does React use Virtual DOM
        In React every UI piece is a component, and each component has a state. React follows the observable pattern and listens for state changes. 
        When the state of a component changes, React updates the virtual DOM tree. Once the virtual DOM has been updated, React then compares the 
        current version of the virtual DOM with the previous version of the virtual DOM. This process is called “diffing”.Once React knows which virtual DOM objects have changed,
         then React updates only those objects, in the real DOM.

-------->Components are independent and reusable bits of code. Components are like functions that return HTML elements.
         Components come in two types, Class components and Function components.

-------->Props are arguments passed into React components.

--------> conditional rendering
          In React, conditional rendering is the process of displaying different content based on certain conditions or states. 

-------->React Memo
         React memo is a Higher Order Component (HOC)
         React memo is used to optimize the performance and make the application faster.. The Memo API avoids unnecessary re-renders in functional components
         example look at in the geeks for geeks

-------->Hooks 
         allow function components to have access to state and other React features.

-------->state 
        used to contain data or information about the component. A component’s state can change over time; whenever it changes, the component re-renders. 

-------->useState
        Usestate is React Hook that allows you to add state to a functional component. It returns an array with two values: the current state and a function to update it.
        The Hook takes an initial state value as an argument and returns an updated state value whenever the setter function is called. 

-------->useEffect
         The useEffect Hook allows you to perform side effects in your components.side effects are actions which are performed with the "outside world."
         Some examples of side effects are: fetching data, directly updating the DOM, and timers.

------->A “key” is a special string attribute you need to include when creating lists of elements in React.
         Keys are used in React to identify which items in the list are changed, updated, or deleted.

-------->Lazy Loading -
         It is a technique used to reduce the load time of a React app. Lazy loading helps reduce the risk of web app performances to a minimum.

-------->useMemo() It is a React hook that is used for caching CPU-Expensive functions.
